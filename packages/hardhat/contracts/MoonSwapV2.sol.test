//SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";

contract MoonSwap {
    using SafeERC20 for IERC20;
    using Counters for Counters.Counter;
    using EnumerableSet for EnumerableSet.UintSet;

    struct Swap {
        IERC20 inToken;
        IERC20 outToken;
        uint256 tokensIn;
        uint256 tokensOut;
        uint256 tokensInAlotted;
        uint256 tokensOutAlotted;
        address inTokenParty;
        address outTokenParty;
        uint256 lastExecuted; // last time a pool swap was executed
        uint256 interval; // interval between two swaps
        uint256 splits; // max splits, 0 = instant payout
        bool status;
    }

    Counters.Counter public swapId;
    mapping(uint256 => Swap) public swaps;
    mapping(address => uint256) public claimableFees;
    address public admin;
    bool public paused;

    EnumerableSet.UintSet private activeSwaps;

    modifier adminOnly() {
        require(msg.sender == admin, "ADMIN_ONLY");
        _;
    }

    modifier isNotPaused() {
        require(!paused, "PAUSED");
        _;
    }

    constructor() {
        admin = msg.sender;
    }

    function claimFees(IERC20 _token) external isNotPaused {
        _token.safeTransfer(admin, claimableFees[address(_token)]);
    }

    function togglePause() external adminOnly {
        paused = !paused;
    }

    function recoverFunds(IERC20 _token, uint256 amount) external adminOnly {
        require(paused, "NOT_PAUSED");
        _token.safeTransfer(admin, amount);
    }

    function createNewSwap(IERC20 _inToken, IERC20 _outToken, uint256 _inTokenAmount, uint256 _interval, uint256 _splits)
        external isNotPaused returns (uint256) {
        _inToken.safeTransferFrom(msg.sender, address(this), _inTokenAmount);
        uint256 fee = _inTokenAmount - (_inTokenAmount/100);
        claimableFees[address(_inToken)] += fee;
        Swap memory newSwap = Swap(
            _inToken, // inToken
            _outToken, // outToken
            _inTokenAmount - fee, // tokensIn
            0, // tokensOut
            0, // tokensInAlotted
            0, // tokensOutAlotted
            msg.sender, // tokensInParty
            address(0), // tokensOutParty
            0, // last execution
            _interval, // accumulates (amount/splits+1) per interval
            _splits, // splits + 1 parts
            false // status
        );
        swaps[swapId.current()] = newSwap;
        activeSwaps.add(swapId.current());
        swapId.increment();
        return swapId.current() - 1;
    }

    function commitToSwap(uint256 _swapId, uint256 _outTokenAmount) external isNotPaused returns (bool) {
        Swap storage newSwap = swaps[_swapId];
        require(newSwap.inTokenParty != address(0) && newSwap.outTokenParty == address(0) && newSwap.status, "CANNOT_COMMIT");
        newSwap.outToken.safeTransferFrom(msg.sender, address(this), _outTokenAmount);
        newSwap.tokensOut = _outTokenAmount;
        newSwap.outTokenParty = msg.sender;
        if (newSwap.splits == 0) { // execute swap instantly
            newSwap.tokensInAlotted = newSwap.tokensOut;
            newSwap.tokensOutAlotted = newSwap.tokensIn;
            newSwap.status = false;
            return true;
        }
        newSwap.status = true;
        return true;
    }

    function claimSwap(uint256 swapId) external isNotPaused returns (bool) {
        Swap memory swap = swaps[swapId];
        if (msg.sender == swap.inTokenParty) {
            swap.outToken.safeTransfer(msg.sender, swap.tokensOutAlotted);
        } else if (msg.sender == swap.outTokenParty) {
            swap.inToken.safeTransfer(msg.sender, swap.tokensInAlotted);
        } else {
            revert();
        }
    }

    function checkUpkeep(bytes calldata /* checkData */) external view returns (bool upkeepNeeded, bytes memory performData) {
        bool upkeepNeeded;
        uint256[] memory upkeeps;
        uint256 idx;
        for (uint256 i = 0; i < activeSwaps.length(); i++) {
            Swap memory swap = swaps[activeSwaps.at(i)];
            if (swap.lastExecuted + swap.interval <= block.timestamp) {
                upkeepNeeded = true;
                upkeeps[idx] = activeSwaps.at(i);
                idx++;
            }
        }
        bytes memory performData = abi.encode(upkeeps, idx);
    }

    function performUpkeep(bytes calldata performData) external {
        (uint256[] memory upkeeps, uint256 idx) = abi.decode(performData, (uint256[], uint256));
        for (uint256 i = 0; i <= idx; i++) {
            Swap memory swap = swaps[upkeeps[i]];

        }
    }
}
