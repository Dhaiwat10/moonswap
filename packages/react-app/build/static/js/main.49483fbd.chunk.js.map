{"version":3,"sources":["components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","helpers/Address.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/SwapItem.jsx","views/Hints.jsx","views/Subgraph.jsx","views/TokenSwap.jsx","views/SwapList.jsx","App.jsx","hooks/useContractConfig.js","index.jsx","contracts/external_contracts.js"],"names":["Text","Typography","Address","props","address","value","ens","useLookupAddress","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","ensSplit","split","length","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","process","NETWORKS","localhost","name","chainId","rpcUrl","window","location","hostname","mainnet","kovan","faucet","rinkeby","RINKEBY_RPC","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","NETWORK","n","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","Blockie","AddressInput","setValue","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","useCallback","newValue","resolveName","possibleAddress","scanner","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","id","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","useEffect","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","key","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","localProvider","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","networkDisplay","modalButtons","cachedProvider","marginLeft","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","map","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","returned","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","injectedProvider","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","getFaucetAddress","listAccounts","_faucetAddress","isAddress","shape","icon","GasGauge","parseInt","Header","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","contractListPromise","externalContractsPromise","loadAppContracts","config","default","deployedContracts","externalContracts","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","SwapItem","updateLoading","txData","updateTxData","checkTx","waitForTransaction","_tx","explorer","flex","flexDirection","justifyContent","fontStyle","Subgraph","ERC20ABI","UNI","abi","TokenSwap","purpose","setPurposeEvents","yourLocalBalance","readContracts","writeContracts","isWalletConnected","useParams","history","useHistory","readyToSwap","setReadyToSwap","addressIn","setAddressIn","addressOut","setAddressOut","numTokensOut","setNumTokensOut","commitSwapId","setCommitSwapId","setTokenInAddress","tokenOutAddress","setTokenOutAddress","setTokenInContract","setTokenOutContract","notFound","setNotFound","getSwapData","MoonSwap","swaps","swapData","tokensOut","outToken","toString","getLatestSwapId","getActiveSwaps","latestSwap","approveTokenAllowance","maxApproval","tokenInContract","decimals","newAllowance","approve","res","createNewSwap","tokenIn","swapValueIn","tokenOut","swapValueOut","inContract","outContract","update","success","then","commitToSwap","currentSwapId","border","minHeight","onFinish","Item","ArrowDownOutlined","htmlType","label","SwapList","activeSwaps","setActiveSwaps","swapIds","setSwapIds","temp","tempIds","forEach","swap","keccak256","marginBottom","dataSource","renderItem","item","index","targetNetwork","DEBUG","scaffoldEthProvider","navigator","onLine","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","localProviderUrlFromEnv","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","logo","Portis","fortmatic","Fortmatic","connector","_options","enable","authereum","Authereum","App","_network","setInjectedProvider","setIsWalletConnected","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useGasPrice","useUserProviderAndSigner","localChainId","selectedChainId","faucetTx","yourMainnetBalance","contractsConfig","setContractsConfig","loadFunc","useContractConfig","mainnetContracts","useOnBlock","_lastBlockNumber","useContractReader","useEventListener","AddressHelper","networkSelected","networkLocal","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","Web3Provider","code","reason","route","setRoute","pathname","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","selectedKeys","HomeOutlined","InteractionOutlined","ContainerOutlined","exact","path","DAI","align","gutter","prevTheme","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","internalType","anonymous","indexed","constant","outputs"],"mappings":"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","file":"static/js/main.49483fbd.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = process.env.INFURA_ID || \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: process.env.RINKEBY_RPC,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"Harmony Testnet\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"Harmony Mainnet\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","const isValidAddress = (address = \"\") => {\n  return address.length === 42 && address !== \"0x0000000000000000000000000000000000000000\";\n};\n\nexport default {\n  isValidAddress,\n};\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  networkDisplay,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          size=\"large\"\n          onClick={loadWeb3Modal}\n          type=\"primary\"\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {networkDisplay}\n      {address ? (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ) : (\n        \"Connecting...\"\n      )}\n      <Balance address={address} provider={localProvider} price={price} />\n      {/* <Wallet\n        address={address}\n        provider={localProvider}\n        signer={userSigner}\n        ensProvider={mainnetProvider}\n        price={price}\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n      /> */}\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport tryToDisplay from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <a href=\"#\" onClick={refresh}>\n              🔄\n            </a>\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  result = tryToDisplay(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Account\n                address={address}\n                localProvider={provider}\n                injectedProvider={provider}\n                mainnetProvider={provider}\n                price={price}\n                blockExplorer={blockExplorer}\n              />\n              {account}\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\n// import { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider, onChange } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        //console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  // const ens = useLookupAddress(ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n        let newAddress = newValue;\n        // if (newAddress.indexOf(\".eth\") > 0 || newAddress.indexOf(\".xyz\") > 0) {\n        //   try {\n        //     const possibleAddress = await ensProvider.resolveName(newAddress);\n        //     if (possibleAddress) {\n        //       newAddress = possibleAddress;\n        //     }\n        //     // eslint-disable-next-line no-empty\n        //   } catch (e) { }\n        // }\n        setAddress(newAddress);\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        // value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n*/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"https://github.com/moonshotcollective/moonswap\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader title=\"Moonswap\" style={{ cursor: \"pointer\" }} />\n    </a>\n  );\n}\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\nimport { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\n\n// added display of 0 if price={price} is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n*/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  return undefined;\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment, setEnvironment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { Typography, Button } from \"antd\";\nimport { NETWORK } from \"../constants\";\n\nexport default function SwapItem({ onClick, hash, localProvider, chainId, ...props }) {\n  const { currentTheme } = useThemeSwitcher();\n  const [loading, updateLoading] = useState(true);\n  const [txData, updateTxData] = useState({});\n\n  const checkTx = async () => {\n    const _tx = await localProvider.waitForTransaction(hash, 1);\n\n    console.log(txData);\n    updateTxData(_tx);\n    updateLoading(false);\n  };\n\n  useEffect(() => {\n    // get transaction status\n    checkTx();\n  }, []);\n\n  const explorer = NETWORK(chainId).blockExplorer || `https://etherscan.io/`;\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <div\n        style={{\n          flex: 1,\n          display: \"flex\",\n          width: \"100%\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          paddingLeft: 5,\n          fontSize: props.fontSize ? props.fontSize : 20,\n        }}\n      >\n        <div>\n          <Typography.Text copyable={{ text: hash }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={`${explorer}tx/${hash}`}\n              rel=\"noopener noreferrer\"\n            >\n              {hash}\n            </a>\n          </Typography.Text>\n          <Button onClick={onClick}>Commit Swap</Button>\n        </div>\n        {loading ? <div style={{ fontStyle: \"italic\", color: \"#efefef\" }}>Loading...</div> : <button></button>}\n      </div>\n    </div>\n  );\n}\n","import { utils } from \"ethers\";\nimport { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, AddressInput } from \"../components\";\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import { SyncOutlined, SettingOutlined, ArrowDownOutlined } from \"@ant-design/icons\";\nimport { utils, ethers } from \"ethers\";\nimport { Button, Divider, Input, List, Row, Col, Tabs, Card, Form, Checkbox, notification } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { Address, Balance, ClaimFees, AddressInput } from \"../components\";\nimport externalContracts from \"../contracts/external_contracts\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nconst ERC20ABI = externalContracts[1].contracts.UNI.abi;\n\nexport default function TokenSwap({\n  purpose,\n  setPurposeEvents,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n  isWalletConnected,\n  userSigner,\n  chainId,\n}) {\n  const { id } = useParams();\n  const history = useHistory();\n  const [readyToSwap, setReadyToSwap] = useState();\n  const [addressIn, setAddressIn] = useState();\n  const [addressOut, setAddressOut] = useState(address);\n  const [token, setTokenOut] = useState();\n  const [numTokensOut, setNumTokensOut] = useState();\n  const [commitSwapId, setCommitSwapId] = useState();\n  const [activeSwaps, setActiveSwaps] = useState();\n  const [tokenInAddress, setTokenInAddress] = useState();\n  const [tokenOutAddress, setTokenOutAddress] = useState();\n\n  const [tokenInContract, setTokenInContract] = useState();\n  const [tokenOutContract, setTokenOutContract] = useState();\n\n  const [notFound, setNotFound] = useState(false);\n\n  useEffect(() => {\n    if (id) {\n      console.log(\"id: \", id);\n      setReadyToSwap(true);\n      setCommitSwapId(id);\n\n      getSwapData(id);\n    }\n  }, [id, readContracts]);\n\n  const getSwapData = async id => {\n    if (readContracts && readContracts.MoonSwap) {\n      const swapData = await readContracts.MoonSwap.swaps(id);\n      const status = swapData.status;\n      if (!status) {\n        setNotFound(true);\n      }\n      setNumTokensOut(swapData.tokensOut.toNumber());\n      setTokenOutAddress(swapData.outToken.toString());\n      console.log(\"swapData: \", swapData);\n    }\n  };\n\n  const getTokenDetails = async ({ token }) => {\n    const decimals = await readContracts[token].decimals;\n    return { decimals };\n  };\n\n  const getLatestSwapId = async () => {\n    let swaps = null;\n    if (readContracts?.MoonSwap) {\n      swaps = await readContracts.MoonSwap.getActiveSwaps();\n      const latestSwap = swaps[swaps.length - 1];\n      console.log(\"latestSwap: \", latestSwap.toNumber());\n      history.push(`/swap/${latestSwap.toNumber()}`);\n      setCommitSwapId(latestSwap.toNumber());\n    }\n  };\n\n  const approveTokenAllowance = async ({ maxApproval, tokenInContract }) => {\n    // const decimals = await getTokenDetails({ token });\n    // FIX: Harcoded decimals value\n    const newAllowance = ethers.utils.parseUnits(maxApproval, await tokenInContract.decimals());\n    const res = await tokenInContract.approve(readContracts.MoonSwap.address, newAllowance);\n    await res.wait(1);\n  };\n\n  const createNewSwap = async ({ tokenIn, swapValueIn, tokenOut, swapValueOut }) => {\n    setTokenInAddress(tokenIn);\n    setTokenOutAddress(tokenOut);\n    if (!isWalletConnected) {\n      return notification.error({\n        message: \"Access request failed\",\n        description: \"Please connect your wallet to proceed.\",\n        placement: \"bottomRight\",\n      });\n    }\n\n    const signer = userSigner;\n\n    console.log(\"signer\", signer);\n\n    const inContract = new ethers.Contract(tokenIn, ERC20ABI, signer);\n    const outContract = new ethers.Contract(tokenOut, ERC20ABI, signer);\n\n    console.log(\"inContract\", inContract);\n\n    setTokenInContract(inContract);\n    setTokenOutContract(outContract);\n\n    // Approve the token allowance\n    await approveTokenAllowance({\n      maxApproval: swapValueIn,\n      tokenInContract: inContract,\n    });\n\n    const result = tx(\n      writeContracts.MoonSwap.createNewSwap(tokenIn, tokenOut, swapValueIn, swapValueOut, addressOut),\n      (update, error) => {\n        console.log(\"result check \", update, error);\n        if (update && (update.status === \"confirmed\" || update.status === 1)) {\n          console.log(\"📡 New Swap Created:\", update);\n          setReadyToSwap(true);\n          setNumTokensOut(swapValueOut);\n          notification.success({\n            message: \"Ready to Commit To Swap\",\n            description: \"successful\",\n            placement: \"bottomRight\",\n          });\n        }\n      },\n    ).then(result => {\n      console.log(\"result finished \", result);\n      getLatestSwapId();\n    });\n  };\n\n  const commitToSwap = async ({ currentSwapId, tokenOut }) => {\n    currentSwapId = commitSwapId;\n    tokenOut = numTokensOut;\n\n    const signer = userSigner;\n    const outContract = new ethers.Contract(tokenOutAddress, ERC20ABI, signer);\n\n    await approveTokenAllowance({ maxApproval: tokenOut.toString(), tokenInContract: outContract });\n\n    const result = tx(writeContracts.MoonSwap.commitToSwap(currentSwapId, tokenOut), update => {\n      console.log(\"📡 Swap Complete:\", update);\n      if (update && (update.status === \"confirmed\" || update.status === 1)) {\n        setReadyToSwap(false);\n        console.log(\" 🍾 Swap finished!\");\n        notification.success({\n          message: \"Swap Complete\",\n          description: \"successful\",\n          placement: \"bottomRight\",\n        });\n      }\n    });\n  };\n\n  if (notFound) {\n    return (\n      <div\n        style={{\n          border: \"1px solid #cccccc\",\n          padding: 30,\n          width: 700,\n          margin: \"auto\",\n          marginTop: 64,\n          borderRadius: 25,\n          minHeight: 100,\n        }}\n      >\n        Swap not found or inactive. Please check the swap id and try again.\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{\n        border: \"1px solid #cccccc\",\n        padding: 30,\n        width: 700,\n        margin: \"auto\",\n        marginTop: 64,\n        borderRadius: 25,\n        minHeight: 100,\n      }}\n    >\n      <div>\n        {!readyToSwap && <h2 style={{ float: \"left\", marginLeft: 10 }}>START SWAP</h2>}\n        {readyToSwap && commitSwapId && numTokensOut && (\n          <h2 style={{ float: \"left\", marginLeft: 10 }}>COMMIT TO SWAP</h2>\n        )}\n        <a style={{ float: \"right\" }}>\n          <Button\n            onClick={() => {\n              /* look how we call setPurpose AND send some value along */\n              // tx(\n              //   writeContracts.YourContract.setPurpose(\"💵 Paying for this one!\", {\n              //     value: utils.parseEther(\"0.001\"),\n              //   }),\n              // );\n              console.log(\"Three dots clicked\");\n              /* this will fail until you make the setPurpose function payable */\n            }}\n            type=\"primary\"\n          >\n            ...\n          </Button>\n        </a>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        {!readyToSwap && (\n          <Form name=\"join_room\" onFinish={createNewSwap}>\n            <div\n              style={{\n                border: \"1px solid #cccccc\",\n                padding: 20,\n                width: 500,\n                margin: \"auto\",\n                marginTop: 64,\n                borderRadius: 25,\n              }}\n            >\n              <Row>\n                <Col span={6}>\n                  <h1 style={{ float: \"left\", fontSize: 40 }}>IN</h1>\n                </Col>\n                <Col span={16}>\n                  <AddressInput\n                    autoFocus\n                    ensProvider={mainnetProvider}\n                    placeholder=\"Address\"\n                    address={addressIn}\n                    onChange={setAddressIn}\n                  />\n                  <Form.Item name=\"tokenIn\">\n                    <Input style={{ marginRight: 20, marginTop: 20 }} placeholder=\"Token Hash\" />\n                  </Form.Item>\n                  <Form.Item name=\"swapValueIn\">\n                    <Input style={{ marginRight: 20, marginTop: 20 }} placeholder=\"Token Amount\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </div>\n            <ArrowDownOutlined style={{ margin: 20 }} />\n            <div\n              style={{\n                border: \"1px solid #cccccc\",\n                padding: 20,\n                width: 500,\n                margin: \"auto\",\n                borderRadius: 25,\n              }}\n            >\n              <Row>\n                <Col span={6}>\n                  <h1 style={{ float: \"left\", fontSize: 40 }}>OUT</h1>\n                </Col>\n                <Col span={16}>\n                  <AddressInput\n                    autoFocus\n                    ensProvider={mainnetProvider}\n                    placeholder=\"Address\"\n                    address={addressOut}\n                    onChange={setAddressOut}\n                  />\n                  <Form.Item name=\"tokenOut\">\n                    <Input style={{ marginRight: 20, marginTop: 20 }} placeholder=\"Token Hash\" />\n                  </Form.Item>\n                  <Form.Item name=\"swapValueOut\">\n                    <Input style={{ marginRight: 20, marginTop: 20 }} placeholder=\"Token Amount\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </div>\n            <Form.Item>\n              <Button htmlType=\"submit\" type=\"primary\" style={{ marginRight: 10, marginTop: 10 }}>\n                Create New Swap\n              </Button>\n            </Form.Item>\n          </Form>\n        )}\n        {notFound && <div>Swap already completed or inactive.</div>}\n        {!notFound && readyToSwap && commitSwapId && numTokensOut && (\n          <Form name=\"join_room\" onFinish={commitToSwap}>\n            <div\n              style={{\n                border: \"1px solid #cccccc\",\n                padding: 20,\n                width: 600,\n                margin: \"auto\",\n                marginTop: 64,\n                borderRadius: 25,\n              }}\n            >\n              <Row>\n                <Col span={16}>\n                  <Form.Item label=\"Swap Id\" name=\"swapId\">\n                    <p>{commitSwapId}</p>\n                  </Form.Item>\n                  <Form.Item label=\"Token Out\" name=\"tokenOut\">\n                    <p>{numTokensOut} </p>\n                  </Form.Item>\n                </Col>\n              </Row>\n            </div>\n            <Form.Item>\n              <Button htmlType=\"submit\" type=\"primary\" style={{ marginRight: 10, marginTop: 10 }}>\n                Commit To Swap\n              </Button>\n            </Form.Item>\n          </Form>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { SyncOutlined, SettingOutlined, ArrowDownOutlined } from \"@ant-design/icons\";\nimport { utils, BigNumber } from \"ethers\";\nimport { Button, Divider, Input, List, Row, Col, Tabs, Card, Form, Checkbox } from \"antd\";\nimport { Address, Balance, SwapItem, AddressInput } from \"../components\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { Router } from \"@uniswap/sdk\";\n\nexport default function SwapList({\n  purpose,\n  setPurposeEvents,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n  chainId,\n}) {\n  const history = useHistory();\n  const { id } = useParams();\n  const [activeSwaps, setActiveSwaps] = useState([]);\n  const [swapIds, setSwapIds] = useState([]);\n\n  const getActiveSwaps = async () => {\n    let swaps = null;\n    let temp = [];\n    let tempIds = [];\n    if (readContracts?.MoonSwap) {\n      swaps = await readContracts.MoonSwap.getActiveSwaps();\n\n      swaps.forEach(swap => {\n        temp.push(utils.keccak256(swap));\n        tempIds.push(swap.toNumber());\n      });\n      console.log(\"viewswap \", swaps, temp);\n      setActiveSwaps(temp);\n      setSwapIds(tempIds);\n    }\n  };\n\n  useEffect(async () => {\n    getActiveSwaps();\n  }, [activeSwaps]);\n\n  return (\n    <div>\n      <div style={{ marginBottom: 25, flex: 1 }}>\n        <Card title=\"Swaps\" style={{ width: \"100%\" }}>\n          <List\n            bordered\n            dataSource={activeSwaps}\n            renderItem={(item, index) => (\n              <List.Item>\n                <div\n                  style={{\n                    width: \"80%\",\n                  }}\n                >\n                  <SwapItem\n                    onClick={() => {\n                      history.push(`/swap/${swapIds[index]}`);\n                    }}\n                    hash={item}\n                    localProvider={localProvider}\n                    chainId={chainId}\n                    fontSize={14}\n                  />\n                </div>\n              </List.Item>\n            )}\n          />\n        </Card>\n      </div>\n    </div>\n  );\n}\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\n//import Torus from \"@toruslabs/torus-embed\"\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { HomeOutlined, ContainerOutlined, InteractionOutlined } from \"@ant-design/icons\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor, Address as AddressHelper } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\n// import Hints from \"./Hints\";\nimport { TokenSwap, SwapList } from \"./views\";\n\nimport { useContractConfig } from \"./hooks\";\n\nimport Portis from \"@portis/web3\";\nimport Fortmatic from \"fortmatic\";\nimport Authereum from \"authereum\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\n\nconst targetNetwork = process.env.REACT_APP_NETWORK ? NETWORKS[process.env.REACT_APP_NETWORK] : NETWORKS.localhost; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = false;\nconst NETWORKCHECK = true;\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\n  : null;\nconst poktMainnetProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\n      \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n    )\n  : null;\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_ID\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://mainnet.infura.io/v3/${INFURA_ID}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          42: `https://kovan.infura.io/v3/${INFURA_ID}`,\n          100: \"https://dai.poa.network\", // xDai\n        },\n      },\n    },\n    portis: {\n      display: {\n        logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n        name: \"Portis\",\n        description: \"Connect to Portis App\",\n      },\n      package: Portis,\n      options: {\n        id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n      },\n    },\n    fortmatic: {\n      package: Fortmatic, // required\n      options: {\n        key: \"pk_live_5A7C91B2FC585A17\", // required\n      },\n    },\n    // torus: {\n    //   package: Torus,\n    //   options: {\n    //     networkParams: {\n    //       host: \"https://localhost:8545\", // optional\n    //       chainId: 1337, // optional\n    //       networkId: 1337 // optional\n    //     },\n    //     config: {\n    //       buildEnv: \"development\" // optional\n    //     },\n    //   },\n    // },\n    \"custom-walletlink\": {\n      display: {\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n        name: \"Coinbase\",\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n      },\n      package: walletLinkProvider,\n      connector: async (provider, _options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n    authereum: {\n      package: Authereum, // required\n    },\n  },\n});\n\nfunction App(props) {\n  const mainnetProvider =\n    poktMainnetProvider && poktMainnetProvider._isProvider\n      ? poktMainnetProvider\n      : scaffoldEthProvider && scaffoldEthProvider._network\n      ? scaffoldEthProvider\n      : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState(\"0x0000000000000000000000000000000000000000\");\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  const contractConfig = useContractConfig();\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  // 📟 Listen for broadcast events\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n\n    if (readContracts) {\n      setIsWalletConnected(AddressHelper.isValidAddress(address));\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <BrowserRouter>\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              onClick={() => {\n                setRoute(\"/\");\n              }}\n              to=\"/\"\n            >\n              <HomeOutlined /> Home\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/swap\">\n            <Link\n              onClick={() => {\n                setRoute(\"/swap\");\n              }}\n              to=\"/swap\"\n            >\n              <InteractionOutlined /> Swap\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/contracts\">\n            <Link\n              onClick={() => {\n                setRoute(\"/contracts\");\n              }}\n              to=\"/contracts\"\n            >\n              <ContainerOutlined /> Contracts\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/mainnetdai\">\n            <Link\n              onClick={() => {\n                setRoute(\"/mainnetdai\");\n              }}\n              to=\"/mainnetdai\"\n            >\n              Mainnet DAI\n            </Link>\n          </Menu.Item>\n        </Menu>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <SwapList\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n              purpose={purpose}\n              setPurposeEvents={setPurposeEvents}\n              chainId={selectedChainId}\n            />\n          </Route>\n          <Route exact path=\"/swap\">\n            <TokenSwap\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n              purpose={purpose}\n              setPurposeEvents={setPurposeEvents}\n              isWalletConnected={isWalletConnected}\n              userSigner={userSigner}\n              chainId={selectedChainId}\n            />\n          </Route>\n          <Route path=\"/swap/:id\">\n            <TokenSwap\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n              purpose={purpose}\n              setPurposeEvents={setPurposeEvents}\n              isWalletConnected={isWalletConnected}\n              userSigner={userSigner}\n              chainId={selectedChainId}\n            />\n          </Route>\n          <Route exact path=\"/contracts\">\n            <Contract\n              name=\"dGTC\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n              contractConfig={contractConfig}\n            />\n            <hr />\n            <Contract\n              name=\"dETH\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n              contractConfig={contractConfig}\n            />\n            <hr />\n            <Contract\n              name=\"MoonSwap\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n              contractConfig={contractConfig}\n            />\n          </Route>\n          <Route exact path=\"/mainnetdai\">\n            <Contract\n              name=\"DAI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n              contractConfig={contractConfig}\n              chainId={1}\n            />\n            {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n          </Route>\n        </Switch>\n      </BrowserRouter>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n          networkDisplay={networkDisplay}\n        />\n        {faucetHint}\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={12}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={12} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\r\nimport { loadAppContracts } from \"../helpers/loadAppContracts\";\r\n\r\nexport const useContractConfig = () => {\r\n  const [contractsConfig, setContractsConfig] = useState({});\r\n\r\n  useEffect(() => {\r\n    const loadFunc = async () => {\r\n      const result = await loadAppContracts();\r\n      setContractsConfig(result);\r\n    };\r\n    void loadFunc();\r\n  }, []);\r\n  return contractsConfig;\r\n};\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}